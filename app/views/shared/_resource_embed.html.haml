- if defined? style and defined? res
  - file_extension = File.extname(res.file.url).split("?")[0].downcase[1..-1] 
  - icon_class = "file_#{file_extension}"
  - hidden = false unless ( defined? hidden and hidden == true )
  - if style == "inline_link"
    %span.resource-inline-container
      - link_class = "resource-inline-link include-file-type-icon #{icon_class}"
      %a{:class => link_class, :href => url_for(res.file.url), :title => res.caption}
        = res.name
  - if style == "big_embed"
    -type = res.file.content_type
    -if type.start_with? "text" or ["bsh", "c", "cc", "cpp", "cs", "csh",
                                    'cyc', 'cv', 'htm', 'html', 'java',
                                    'js', 'm', 'mxml', 'perl', 'pl', 'pm',
                                    'py', 'rb', "sh", "xhtml", "xml", "xsl",
                                    "h", "ini"].include? file_extension
      = render :partial => "shared/code_content", :locals => {:res => res, :extension => file_extension, :style => style}
    -if ["audio/mpeg", "audio/mp4", "audio/ogg", "audio/mp3"].include? type
      = render :partial => "shared/audio_content", :locals => {:res => res, :style => style}
    -if type.start_with? "image"
      = render :partial => "shared/image_content", :locals => {:res => res, :style => style}
  - if style == "full_page"
    %div.media-resource
      .media_header
        -if res.name
          %h2= res.name 
        -if res.caption != ""
          .caption
            = res.caption
          
        %p
          =link_to res.file_file_name, res.file.url
          (#{res.file.content_type})
          updated by
          = link_to res.user.login, res.user
      .inside{ :style => hidden ? "display: none;" : "" }
        -type = res.file.content_type
        -if type.start_with? "text" or ["bsh", "c", "cc", "cpp", "cs", "csh",
                                        'cyc', 'cv', 'htm', 'html', 'java',
                                        'js', 'm', 'mxml', 'perl', 'pl', 'pm',
                                        'py', 'rb', "sh", "xhtml", "xml", "xsl",
                                        "h", "ini"].include? file_extension
          = render :partial => "shared/code_content", :locals => {:res => res, :extension => file_extension, :style => style}
        -if ["audio/mpeg", "audio/mp4", "audio/ogg", "audio/mp3"].include? type
          = render :partial => "shared/audio_content", :locals => {:res => res, :style => style}
        -if type.start_with? "image"
          = render :partial => "shared/image_content", :locals => {:res => res, :style => style}
